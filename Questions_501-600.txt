
Question 567: Permutations in String------------------------------------------------------------------------------------Question 567: Permutations in String

Brute Force: This is basically as sliding window approach. This is the most optimal solution

const checkInclusion = (s1, s2) => {
    if(s1.length > s2.length) return false;
    
    const freq = getFrequency(s1);
    const winLength = s1.length;
    let start = 0;
    let end = 0;
    
    while(end < s2.length) {
        const endLetter = s2.charAt(end);
        const startLetter = s2.charAt(start);
        
        if(freq.has(endLetter) && freq.get(endLetter) > 0) {
            freq.set(endLetter, freq.get(endLetter) - 1);
            
            if(end - start + 1 === winLength) return true;
            
            end += 1;
        } else if(freq.has(startLetter)) {
            freq.set(startLetter, freq.get(startLetter) + 1);
            start += 1;
        } else {
            start += 1;
            end += 1;
        }
    }
    
    return false;
};

const getFrequency = (str) => {
    const freq = new Map();
    for(const letter of str) {
        if(!freq.has(letter)) freq.set(letter, 0);
        freq.set(letter, freq.get(letter) + 1);
    }
    
    return freq;
};


Question 474: Ones and Zeros

This is similar to many other questions encountered where we just need to iterate through the possible combinations and then check the validity while also remember the count values;

Brute force:

var findMaxForm = function(strs, m, n) {
    const countMap = strs.map(str => getPair(str))
    
    let max = -Infinity;
    
    countMap.forEach((pair, i) => {
        max = Math.max(max, rec(countMap, m, n, i, 0))
    })
    
    return max;
};

const rec = (countMap, m, n, i, count) => {
    if (m == 0 && n == 0) return count;
    

    if (m > 0 && n > 0 && i < countMap.length) {
        let [currZeros, currOnes] = countMap[i];
        return Math.max(rec(countMap, m - currZeros, n - currOnes, i + 1, count + 1), rec(countMap, m, n, i + 1, count))
    }     
    
   
    return -Infinity;
}

const getPair = (str) => {
    let count = 0;
    
    for (let i = 0; i < str.length; i++) {
        if (str[i] == "0") count += 1;
    }
    
    return [count, str.length - count];
}

We can further optimize the brute force such that it becomes easier to memoize it

Optimal solution:

TODO



Question 495: TargetSum

The Brute force with recursion:

const findTargetSumWays = function(nums, S) {
    let helper = function(index = 0, remaining = S){
        if(index == nums.length){
            if(remaining == 0) return 1;
            else {return 0;}
        } 
        return helper( index+1, remaining + nums[index]) + helper( index+1, remaining - nums[index]);
    }
  return helper();
};

Optimization is carried out with memos
we can use the index and the depth of the tree as keys
our values would be the value for count,
Optimal solution:

TODO:

Question 1482:

var minDays = function (bloomDay, m, k) {
    let totalNumberOfFlowers = bloomDay.length;
    let requiredNumberOfFlowers = m * k;

    if (totalNumberOfFlowers < requiredNumberOfFlowers) return -1;

    // Time complexity for getting unique values = O(N) where N is the length of bloomDay
    // Time complexity for sort unique values = O(N * logN) where N is the length of bloomDay

    // Space complexity for both = O(n)
    let uniqueBloomDay = [...new Set(bloomDay)].sort((a, b) => a - b);
    let lo = 0;
    let hi = uniqueBloomDay.length - 1;

    // Time complexity = O(logN) where N is the length of bloomDay
    // Space complexity = O(1)
    while (lo <= hi) {
        let mid = Math.floor((lo + hi) / 2);
        let daysToWait = uniqueBloomDay[mid];

        if (doWeHaveEnoughFlowers(bloomDay, daysToWait, m, k)) {
            hi = mid - 1;
        } else {
            lo = mid + 1;
        }
    }
    return uniqueBloomDay[lo];
};

const doWeHaveEnoughFlowers = (bloomDay, daysToWait, m, k) => {
    // Time complexity = O(n) where n is the length of bloomDay
    // Space complexity = O(1)
    let numBouquets = 0;
    let numFlower = 0;

    for (let i = 0; i < bloomDay.length; i++) {
        if (bloomDay[i] <= daysToWait) {
            numFlower += 1;
        } else {
            numFlower = 0;
        }

        if (numFlower == k) {
            numBouquets += 1;
            numFlower = 0;
        }
    }

    return numBouquets >= m;
};

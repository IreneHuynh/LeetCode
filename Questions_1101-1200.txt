
Question: 1105: Filling Bookcase Shelves---------------------------------------------------------------------------------Question: 1105: Filling Bookcase Shelves

Brute Force:
We simply ask ourselves if we should add the book or not, then it becomes a tree like pattern.
If we add the book to the shelf we decrease the width remaining, otherwise we add to the existing height;

var minHeightShelves = function(books, shelf_width) {
    let helper = function(index = 0,curheight= 0, remainingWidth = shelf_width){
        if(index == books.length) return curheight;
        minheight = Infinity;
        let [width, height] = books[index];
        if(curheight == 0) minheight = helper(index + 1, height, remainingWidth - width);
        else if(width > remainingWidth) minheight = curheight + helper(index, 0, shelf_width);
        else{
            minheight = Math.min( helper(index+1, Math.max(curheight, height), remainingWidth - width),
                                 curheight + helper(index ,0, shelf_width));
        }
        return minheight;
        
    }
    return helper();
};

Optimal Solution: 
Similar to other case, the optimal solution is just a memo;

var minHeightShelves = function(books, shelf_width) {
    let helper = function(index = 0,curheight = 0, remainingWidth = shelf_width){
        if(index == books.length) return curheight;
        minheight = Infinity;
        let [width, height] = books[index];
        if(curheight == 0) minheight = helper(index + 1, height, remainingWidth - width);
        else if(width > remainingWidth) minheight = curheight + helper(index, 0, shelf_width);
        else{
            minheight = Math.min( helper(index+1, Math.max(curheight, height), remainingWidth - width),
                                 curheight + helper(index ,0, shelf_width));
        }
        return minheight;
    }
    return helper();
};

Question 1130: Minimum Cost Tree From Leaf Values-----------------------------------------------------------------------Question 1130: Minimum Cost Tree From Leaf Values

Brute force:
var mctFromLeafValues = function(arr) {
    let res = 0
    while (arr.length > 1) {
        let min = Math.min(...arr)
        let min_idx = arr.indexOf(min)
        if (0 < min_idx && min_idx < arr.length - 1) {
            res += Math.min(arr[min_idx - 1], arr[min_idx + 1]) * min
        } else {
            res += (min_idx === 0 ? arr[min_idx + 1] : arr[min_idx - 1]) * min
        }
        arr.splice(min_idx, 1)
    }
    return res
};


Question 1139: Largest 1-Bordered Squares-------------------------------------------------------------------------------Question 1139: Largest 1-Bordered Squares

Brute force: We are essentially breaking this question down to 3 functions. These three functions are basilly expanding the search outward and breaking the square we are checking into 2 points. The top left and the bottom right corners. For each expansion we are checking if it is square and whether or not it is within the boundaries.

var largest1BorderedSquare = function(grid) {
    let max = 0;
    //Time coplexity O(n^2 * n^2) = O(n^4) where n is grid length;
    // Space comeplxity O(1);
    grid.forEach((row, i) => {
        row.forEach((cell, j) => {
            max = Math.max(max, rec(grid, i, j, i, j));
        })
    })
    return max;
};

const rec = (grid , i, j, k, r) => {
    // Time complexity O(n * 2) where n is grid length;
    // Space comeplxity O(1);
    
    if (k > grid.length - 1 || r > grid[0].length - 1) return 0;
    
    let max = isValidSquare(grid, i, j, k, r) ? (k - i + 1) * (r - j + 1) : 0;
    
    return Math.max(max, rec(grid, i, j, k + 1, r + 1))
}

const isValidSquare = (grid, i, j, k, r) => {
    
    // Time complexity O(n) where n is grid length;
    // Space comeplxity O(1);
    for (let row = i; row <= k; row++) {
        if (grid[row][j] == 0 || grid[row][r] == 0) return false;
    }
    
    for (let col = j; col <= r; col++) {
        if (grid[i][col] == 0 || grid[k][col] == 0) return false;
    }
    
    return true;
}

Question 1143: Longest Common Subsequence-------------------------------------------------------------------------------Question 1143: Longest Common Subsequence

Brute force: 
We can branch into three paths, we either increment both index, the first index, or the other;
var longestCommonSubsequence = function(text1, text2) {
    let in1 = text1.length ;
    let in2 = text2.length ;
    let max = 0;
    let helper = function(ind1 = 0, ind2 = 0){
        if(in1 == ind1 || in2 == ind2) return 0;
        else if(text1[ind1] === text2[ind2]) {
            max = helper(ind1 +1, ind2 +1) + 1;
        }
        else{
            max = Math.max(helper(ind1+1, ind2), helper(ind1, ind2+1), helper(ind1+1, ind2+1));
        }
        return max;
    }
    return helper();
};

Optimal: 
We just make a memo:
var longestCommonSubsequence = function(text1, text2) {
    let in1 = text1.length ;
    let in2 = text2.length ;
    let max = 0;
    const map = new Map();
    let helper = function(ind1 = 0, ind2 = 0){
        let key = `${ind1}#${ind2}`;
        if(map.has(key)) return map.get(key);
        if(in1 == ind1 || in2 == ind2) return 0;
        else if(text1[ind1] === text2[ind2]) {
            max = helper(ind1 +1, ind2 +1) + 1;
        }
        else{
            max = Math.max(helper(ind1+1, ind2), helper(ind1, ind2+1), helper(ind1+1, ind2+1));
        }
        map.set(key, max);
        return max;
    }
    return helper();
};

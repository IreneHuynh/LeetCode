Question 1113:

ar largest1BorderedSquare = function(grid) {
    let max = 0;
    //Time coplexity O(n^2 * n^2) = O(n^4) where n is grid length;
    // Space comeplxity O(1);
    grid.forEach((row, i) => {
        row.forEach((cell, j) => {
            max = Math.max(max, rec(grid, i, j, i, j));
        })
    })
    return max;
};

const rec = (grid , i, j, k, r) => {
    // Time complexity O(n * 2) where n is grid length;
    // Space comeplxity O(1);
    
    if (k > grid.length - 1 || r > grid[0].length - 1) return 0;
    
    let max = isValidSquare(grid, i, j, k, r) ? (k - i + 1) * (r - j + 1) : 0;
    
    return Math.max(max, rec(grid, i, j, k + 1, r + 1))
}

const isValidSquare = (grid, i, j, k, r) => {
    
    // Time complexity O(n) where n is grid length;
    // Space comeplxity O(1);
    for (let row = i; row <= k; row++) {
        if (grid[row][j] == 0 || grid[row][r] == 0) return false;
    }
    
    for (let col = j; col <= r; col++) {
        if (grid[i][col] == 0 || grid[k][col] == 0) return false;
    }
    
    return true;
}

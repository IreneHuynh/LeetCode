Question 714: Best Time to Buy and Sell Stock with Transaction Fee-----------------------------Question 714: Best Time to Buy and Sell Stock with Transaction Fee

We basically branch off into 2 paths, either we buy or we don't buy that stock, from there we can branch off again, into another subset of questions. When we have a stock, we either have a stock that we bought and from that we can either hang onto it or sell it. In our other main branch we have no previous stock, so we either continue to not buy anymore stock or buy one.

 var maxProfit = function(prices, fee) {
    let results = 0;
    let n = prices.length;
    let helper = function(i = 0, buy = false){
        if(i >= n) return 0;
        if(buy){
            results = Math.max( helper(i+1, false) + prices[i] - fee,
                              helper(i+1, true));
        }
        else{
            results = Math.max( helper(i+1, true) - prices[i],
                              helper(i+1, false));
        }

        return results;
    }
    return helper();
};

To optimize we would rather use bfs:

var maxProfit = function(prices, fee) {
    if (!prices || !prices.length) {
        return 0;
    }
    
    const n = prices.length;
    let profit = 0;
    let hold = -prices[0];
    
    for (let i = 1; i < n; i++) {
        profit = Math.max(profit, hold + prices[i] - fee);
        hold = Math.max(hold, profit - prices[i]);
    }
    
    return profit;
};


Question 746: Min Cost Climbing Stairs-------------------------------------------------------------------------------------Question 746: Min Cost Climbing Stairs


Optimal solution:
Using memoization

var minCostClimbingStairs = function(cost) {
    let dp = Array(cost.length);
    helper(cost, 0, dp);
    helper(cost, 1, dp);
    function helper(cost, index, dp){
        if (index >= cost.length) return 0;   
        if (dp[index] != undefined) return dp[index];
        dp[index] = cost[index] + Math.min(helper(cost, index + 1, dp), helper(cost, index + 2, dp));
        return dp[index];
        
    }
    return Math.min(dp[0], dp[1]);    
};

Question 764: Largest Plus Sign---------------------------------------------------------------------------------------------------Question 764: Largest Plus Sign

Brute force:
We are simply expanding out and testing the boundary case
However there isn't an optimal solution in this case because we do not revisit due to our iterative method

var orderOfLargestPlusSign = function(N, mines) {
    let max = 0;
    let matrix = [...Array(N)].map((_, x)  => [...Array(N)].map((_, y) => mindes[x][y] ? 0 : 1));
    
    let memo = [...Array(N)].map(_ => [...Array(N)].map(_ => null));
    
    for (let x = 0; x < N; x++) {
        for (let y = 0; y < N; y++) {
            max = Math.max(max, expandPlusSign(matrix, x, y, count, memo))
        }
    }
    
    return max;
};

const expandPlusSign = (matrix, x, y, count, memo) => {
    if (isOutOfBound(x, y)) return count;
    
    if (memo[x][y]) return memo[x][y];
    
    const top    = matrix[x][y + count];
    const bottom = matrix[x][y - count];
    const left   = matrix[x - count][y];
    const right  = matrix[x + count][y];
    
    memo[x][y] = (top && bottom && left && right) ? expandPlusSign(matrix, x, y, memo) ? count;
    return memo[x][y];  
}

Question 1027: Longest Arithmetic Sequence

Brute force: We would just look the difference and basically try to guess the upcoming sequence; 

const longestArithSeqLength = function(A) {
    let max = 0;
    let seqNum = 0;
    for(let i=0; i<A.length-1; i++){
        for(let j=i+1; j<A.length; j++){
            let diff = A[j] - A[i];
            let k = j;
            seqNum = 2;
            while(true) {
                let next = A.indexOf(A[k] + diff);
                if(next > j && next < A.length){
                    k = next;
                    seqNum++;
                }
                else if(next == -1){
                    break;
                }
            }
            if(seqNum > max){
                max = seqNum;
            }
        }
    }
    return max;
};

Optimal Answer: we would memoize it using the key equal to the index and the difference, however we want to think of the results in an updated version and a current version.


var longestArithSeqLength = function(A) {
    let map = new Map();
    let max = 2;
  
    for(let i = 0; i < A.length -1; i++) {
        for(let j = i +1; j < A.length; j++) {
            let diff = A[j] - A[i];
            let res = map.get(`${i}#${diff}`) +1 || 2;
            map.set(`${j}#${diff}`, res);
            max = Math.max(max, res)
        }
    }
    return max
};

Question 1051:

Using brute force:

We sort and then compare if they are the same element

var heightChecker = function(heights) {
    let countMoves = 0;
    let sortedArray = [...heights].sort((a, b) => a - b);
    
    // if the values of the input array and sorted array are not the same, then the value should be moved
    for (let i = 0; i < heights.length; i++) {
        if (heights[i] !== sortedArray[i]) {
            countMoves++;
        }
    }
        
    return countMoves;
};

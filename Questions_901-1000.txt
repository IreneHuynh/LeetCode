Question 905: Sort Array By Parity-------------------------------------------------------------------------------------Question 905: Sort Array By Parity

The brute force:
would to construct an even and odd array and then merge it.

Optimal Solution:
However I thought of the optimal first. We would just have two pointers such that they are going inwards. We would just swap the element of the left pointer if it was odd with the element in the right point.

var sortArrayByParity = function(A) {
    let left = 0, right = A.length - 1
    while (left < right) {
        while (A[left] % 2 === 0 && left < right) left++
        while (A[right] % 2 !== 0 && left < right) right--
        [A[left], A[right]] = [A[right], A[left]]
    }
    return A
};

Question 914: X of a Kind of Cards-------------------------------------------------------------------------------------Question 914: X of a Kind of Cards

Brute force:

Would to count the occurences of different types of cards, and it should be divisible by the number of cards in the deck. This is more of a math problem because this is simply a gcd problem

Optimal Solution:

var hasGroupsSizeX = function(deck) {
  const map = {};
  deck.forEach(d => {
    map[d] = (map[d] || 0) + 1;
  });
  const groups = Object.values(map);
  let g = groups[0];
  for (let i = 1; i < groups.length; i++) {
    g = gcd(g, groups[i]);
    if (g < 2) return false;
  }
  return g >= 2;
};

const gcd = (x, y) => (x === 0 ? y : gcd(y % x, x));


Question 922: Sort Array by Parity

Optimal Solution: 
    This question build onto the two pointer answer, where we just swap the odd element to the back and keep the even elements in the front.

  for (let i = 0, j = 1; i < A.length; i += 2) {
    if (A[i] % 2) {
      while (A[j] % 2 && j < A.length) j += 2;
      [A[i], A[j]] = [A[j], A[i]];
    }
  }
  return A;
};

Question 931: Minimum Falling Path Sum---------------------------------------------------------------------------------Question 931: Minimum Falling Path Sum
Brute Force using recursion: At first we are generating all the possible combinations of falling. We then store all the possible combinates and the sums. We then try to find the smallest sum.

var minFallingPathSum = function(A) {
    for(let i = 1; i < A.length; i++) {
        for(let j = 0; j < A[0].length; j++) {
            if(j == 0) {
                A[i][j] += Math.min(A[i-1][j], A[i-1][j+1]);
            } else if(j == A[0].length - 1){
                A[i][j] += Math.min(A[i-1][j-1], A[i-1][j]);
            } else {
                let minFirstTwo = Math.min(A[i-1][j-1], A[i-1][j]);
                A[i][j] += Math.min(minFirstTwo, A[i-1][j+1]);
            }
        }
    }
    return Math.min(...A[A.length - 1]);
};

We can clean up this code a bit to make the memoization more clear

var minFallingPathSum = function(A) {
  const m = A.length;
  const n = m;
  let dp = [...A[0]];
  for (let i = 1; i < m; i++) {
    const next = new Array(n).fill(null);
    for (let j = 0; j < n; j++) {
      const left = j - 1 >= 0 ? dp[j - 1] : Infinity;
      const middle = dp[j];
      const right = j + 1 < n ? dp[j + 1] : Infinity;
      next[j] = A[i][j] + Math.min(left, middle, right);
    }
    dp = next;
  }
  return Math.min(...dp);
};


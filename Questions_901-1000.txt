
Question 931: Minimum Falling Path Sum---------------------------------------------------------------------------------Question 931: Minimum Falling Path Sum
Brute Force using recursion: At first we are generating all the possible combinations of falling. We then store all the possible combinates and the sums. We then try to find the smallest sum.

var minFallingPathSum = function(A) {
    for(let i = 1; i < A.length; i++) {
        for(let j = 0; j < A[0].length; j++) {
            if(j == 0) {
                A[i][j] += Math.min(A[i-1][j], A[i-1][j+1]);
            } else if(j == A[0].length - 1){
                A[i][j] += Math.min(A[i-1][j-1], A[i-1][j]);
            } else {
                let minFirstTwo = Math.min(A[i-1][j-1], A[i-1][j]);
                A[i][j] += Math.min(minFirstTwo, A[i-1][j+1]);
            }
        }
    }
    return Math.min(...A[A.length - 1]);
};

We can clean up this code a bit to make the memoization more clear

var minFallingPathSum = function(A) {
  const m = A.length;
  const n = m;
  let dp = [...A[0]];
  for (let i = 1; i < m; i++) {
    const next = new Array(n).fill(null);
    for (let j = 0; j < n; j++) {
      const left = j - 1 >= 0 ? dp[j - 1] : Infinity;
      const middle = dp[j];
      const right = j + 1 < n ? dp[j + 1] : Infinity;
      next[j] = A[i][j] + Math.min(left, middle, right);
    }
    dp = next;
  }
  return Math.min(...dp);
};


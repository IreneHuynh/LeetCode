
Question 1: Two Sums-------------------------------------------------------------------------------------------------------------------------Question 1: Two Sums
Brute Force Approach: I would just iterate through the array using two pointers
and if they add to the target I would return their indices, otherwise I would
return an error

Run time is O(n^2) 

var twoSum = function(nums, target) {
    for(let i = 0; i< nums.length - 1; i++){
        for(let j = i+1; j< nums.length; j++){
            if(nums[i]+nums[j] == target) return [i,j];   
        }
    }throw new TypeError("No solution");
    
};

Optimal Approach: I would calculate the complement value of each number and store that
value in a map. The map has a key of the element in the array and the value is the index
As I iterate through the array, if I encounter the complement I would
return the indices of both the elements.

Run time is 0(n)

var twoSum = function(nums, target) {
    const compMap = new Map();
    for (const num in nums) {
        const complement = target - nums[num];
        if (compMap.has(complement)) {
            return [num, compMap.get(complement)]
        }
        compMap.set(nums[num], num);
    }
};


Question 2: Add Two Numbers-----------------------------------------------------------------------------------------------------------Question 2: Add Two Numbers

Brute force: We would iterate through each list to check if the node exist and if there is a value
We would then add the two values up and see if the value would be greater than 10
If it we introduce an element named carry, which will either be 1 or 0; We continues add the values
in the node list up along with the carry value. After the end of the list we want to check if there
is a carry value at the end

var addTwoNumbers = function(l1, l2) {
   let p1 = l1;
   let p2 = l2;
   let num1 = 0;
   let num2 = 0; 
   let carry = 0;
   let solution = new ListNode(0);
   let current = solution;
     
   while (p1 || p2 ){
     num1 = (p1) ? p1.val : 0;
     num2 = (p2) ? p2.val : 0;
   
     if(num1 + num2 + carry > 9){
         current.next = new ListNode(num1 + num2 + carry - 10);
         current = current.next;
         carry = 1;
     } else {
         current.next = new ListNode(num1 + num2 + carry);
         current = current.next;
         carry = 0;
     }
     
     if(p1) p1 = p1.next;
     if(p2) p2 = p2.next;
   }
    
   current.next = carry? new ListNode(carry): 0;
   return solution.next;
};

This is an example of a recursive answer using the same logic

var addTwoNumbers = function(l1, l2) {
   function helper(list1 = l1, list2= l2, carry= 0) {
        if(!list1 && !list2 && !carry) return null;
        let sum = carry, next1 = null, next2 = null;
        
        if(list1 && list2) {
            sum += (list1.val + list2.val);
            next1 = list1.next;
            next2 = list2.next;
        } else if(list1) {
            sum += list1.val;
            next1 = list1.next;
        } else if(list2) {
            sum += list2.val;
            next2 = list2.next;
        }
        
        const newList = new ListNode(sum%10);
        newList.next = helper(next1, next2, Math.floor(sum/10))
        return newList;
    }
    
    return helper();
};

Question 3: Longest Substring Without Repeating Characters---------------------------------------------Question 3: Longest Substring Without Repeating Characters

I like to think of this question like a sliding window. Where we have two 
pointers the head and the tail and everytime we encounter a character that
we have seen before we just add.
Brute force:


Optimals:
var lengthOfLongestSubstring = function(s) {
    let left = 0;
    let right = 0;
    let maxlength = 0;
    let set = new Set();
    
    while(right < s.length){
        if(!set.has(s.charAt(right))){
            set.add(s.charAt(right));
            right++;
            maxlength = Math.max(set.size, maxlength);         
        }
        else{
            set.delete(s.charAt(left));
            left++;
        }
    }
    return maxlength;
};
Question 4: Median of Two sorted Arrays-----------------------------------------------------------------------------------Question 4: Median of Two sorted Arrays



Question 5: Longest Palindromic Substring-------------------------------------------------------------------------------Question 5: Longest Palindromic Substring
My thinking process towards this is if I start from the outer array and compare the letters towards the middle I can check if there exist two characters that are
the same. If two aren't I continue inwards. 
Brute Force:
function isPalindrome(s) {
    let k = 0;
    let l = s.length - 1;
    let isPalindrome = true;
    while(k<=l) {
        if (!(s.charAt(k) === s.charAt(l))) {
            isPalindrome = false;
            break;
        }
        k++;
        l--;
    }
    return isPalindrome;
}


function longestPalindrome(s) {

    let maxPalindrome = "";
    
    for (let i = 0; i <= s.length-1; i++) {
        for (let j = i+1; j <= s.length; j++) {
            let subStr = s.substring(i, j);
            if (isPalindrome(subStr)) {
                if (subStr.length > maxPalindrome.length) {
                        maxPalindrome = subStr;
                }
            } 
        }
    }  
    
    return maxPalindrome;
}


Optimal: I am bubbling from the middle outwards, the approach is similar but optimal because everything is done recursively
var longestPalindrome = function(s) {
    let maxSub = '';
    
    const bubbleFromCenter = (left, right) => {
        while(left >= 0 && right < s.length && s[left] === s[right]) {
            left--;
            right++;
        }
        return s.slice(left+1, right)
    }
    
    for(let i = 0; i < s.length; i++) {
        const sub1 = bubbleFromCenter(i, i);
        const sub2 = bubbleFromCenter(i, i+1);
        const sub = sub1.length > sub2.length ? sub1 : sub2
        if(sub.length > maxSub.length) {
            maxSub = sub
        }
    }
    return maxSub
};


Question 6: Zigzap Conversation---------------------------------------------------------------------------------------------------Question 6: Zigzap Conversation
Optimal:
var convert = function(s, numRows) {
  if (numRows === 1) return s;

  let y = 0;
  let isZigging = true;
  const rows = [...new Array(numRows)].map( el => []);

  for (let i = 0; i < s.length; i++) {
    rows[y].push(s[i]);

    if (y === numRows - 1) isZigging = false;
    if (y === 0) isZigging = true;

    y = isZigging ? y + 1 : y - 1;
  }

  return rows.reduce((acc, row) => string + row.join(''), '');
};
Question 7: Reverse Integer-----------------------------------------------------------------------------------------------------------Question 7: Reverse Integer
const reverse = (x) => {
  let absX = Math.abs(x);
  let result = '';

  while (absX > 0) {
    result += absX % 10;
    absX = ~~(absX / 10);
  }

  if (result < -(2 ** 31) || result > 2 ** 31 - 1) {
    return 0;
  }

  return x < 0 ? -result : +result;
};

Question 8: String to Integer-------------------------------------------------------------------------------------------------------Question 8: String to Integer

Brute Forces:
    We just need to check for leading spaces, and making sure the first element is a number. Then we do simple boundary checks before casting returning it. This is O(n) time complexity.

var myAtoi = function(str) {
    
    let strArr = str.trim().split(" ")[0];
    strArr = parseInt(strArr);
    if( strArr > (2 ** 31) -1) return (2 ** 31) -1;
    else if ( strArr < (-2)**31) return ((-2) ** 31);
    return Number.isInteger(strArr)? strArr: 0;
    
};

Question 9: Palindrome Number-------------------------------------------------------------------------------------------------------Question 9: Palindrome Number
Brute Force: The idea behind this is to pop off the last ligit until we can effectively produce a copy of the input function and at that point we compare 

const isPalindrome = (x) => {
  const str = String(x);
  if (str.length === 1) return true;
  const reverse = value => {
    let result = '';
    for (let i = value.length - 1; i >= 0; i -= 1) {
      result += value[i];
    }
    return result;
  }
  return reverse(str) === str;
};

Again there is no optimal solution to this because this is alread O(n)work.

Question 11: Container With Most Water

We just need to compare the minium height of two point and multiply it by the difference in index values.

Brute force/ Optimal:

var maxArea = function(height) {
    let maxWater = 0, start = 0, end = height.length-1;
    
    while(start < end) {
        const area = (end - start) * Math.min(height[start], height[end]);
        maxWater = Math.max(maxWater, area);
        height[start] < height[end] ? start++ : end--;
    }
    return maxWater;
};
Question 15: 3sums

Three sums can be the same is 2sums. We just take the first element and subtract it from our target. Then we call 2 sums on the remainder of the array
Brute force:
var threeSum = function(nums) {
	var rtn = [];
	if (nums.length < 3) {
		return rtn;
	}
	nums = nums.sort(function(a, b) {
		return a - b;
	});
	for (var i = 0; i < nums.length - 2; i++) {
		if (nums[i] > 0) {
			return rtn;
		}
		if (i > 0 && nums[i] == nums[i - 1]) {
			continue;
		}
		for (var j = i + 1, k = nums.length - 1; j < k;) {
			if (nums[i] + nums[j] + nums[k] === 0) {
				rtn.push([nums[i], nums[j], nums[k]]);
				j++;
				k--;
				while (j < k && nums[j] == nums[j - 1]) {
					j++;
				}
				while (j < k && nums[k] == nums[k + 1]) {
					k--;
				}
			} else if (nums[i] + nums[j] + nums[k] > 0) {
				k--;
			} else {
				j++;
			}
		}
	}
	return rtn;
};

Question 16: 3Sum Closets

Similar to 3Sum but we have an object that has the sum and the difference so that we can later sort
Brute Force:

var threeSumClosest = function(nums, target) {
    nums.sort((a,b)=> a-b);
    var min ;
    for(var i=0;i<nums.length;i++){
        var j = i+1;
        var k  = nums.length-1;
        while(j < k){
            var sum = nums[i]+nums[j]+nums[k];
            var diff1 = Math.abs(sum-target)
            var temp1 =[diff1,sum]
            if(sum === target) return target;
            else if(sum > target){
                !min ? min = temp1: min[0] > temp1[0]? min= temp1:min;
                 k--;
            }
            else{
              !min ? min = temp1: min[0] > temp1[0]? min= temp1:min;
              j++;
            }
        };
    } return min[1];
};

Question 21: Merge Two Sorted Lists--------------------------------------------------------------------------------------------------Question 21: Merge Two Sorted Lists

Optimal Solution: 
We are just comparing which element in the string is larger and then adding it onto the list, the function is recursive and will only take O(n+m) work where n and m are the length of l1 and l2 respectively.

const mergeTwoLists = (l1, l2) => {
    if(!l1 || !l2) return l1 || l2
    if(l1.val < l2.val){
        l1.next = mergeTwoLists(l1.next, l2)
        return l1
    }
    else {
        l2.next = mergeTwoLists(l1, l2.next)
        return l2
    }
}

Question 27: Remove Element-----------------------------------------------------------------------------------------------------------Question 27: Remove Element

Optimal Solution: 
This is one of the cases where we have to think about what kind of information we need and which we don't. Instead of going through the array, we can just replace it with the last element. 

var removeElement = function(nums, val) {
    let len = nums.length;
    let i = 0;
    while (i < len){
        if (nums[i] == val){
            nums[i] = nums[len-1];
            len--;
        }
        else i++;
    }
    return len;  
};

Question 28: Implement strStr()-------------------------------------------------------------------------------------------------------Question 28: Implement strStr()

Optimal Solution:
This is easily done with a one liner dude to javascripts library.

var strStr = function(haystack, needle) {
    return haystack.indexOf(needle);
};



Question 36: Valid Sudoku-------------------------------------------------------------------------------------------------------------Question 36: Valid Sudoku
var isValidSudoku = function(board) {
    let rows ={};
    let columns = {};
    let boxes = {};
    
    // make maps
    for (let i = 0; i < 9; i++){
        rows[i] = {};
        columns[i] = {};
        boxes[i] = {}
    }
    
    //Evaluate Sudoku
    for(let row = 0; row < 9 ; row++){
        let currentRow = rows[row];
        for(let column = 0; column < 9; column++){
            let value = board[row][column];
            let currentColumn = columns[column];
            let currentBox = boxes[Math.floor(row / 3) * 3 + Math.floor(column / 3)];
            
            if(value !== ".") {
                if(currentRow[value] || currentColumn[value] || currentBox[value]){
                    return false;
                } else {
                    currentRow[value] = true;
                    currentColumn[value] = true;
                    currentBox[value] = true;
                } 
            }
        }
    }
    return true;
};


Question 39: Combination Sum---------------------------------------------------------------------------------------------------------Question 39: Combination Sum

Brute Force: We simply want to collect the possible combinations if it reaches the target. This is where the backtracking technique comes in handing. We will only add a list of possible combinations if it reaches the target sum.

var combinationSum = function(candidates, target) {
    const res = [];
    candidates.sort();
    function permute(arr=[], remain = target, index=0) {
        if(remain < 0) return;
        else if(remain === 0) res.push(arr);
        for(let i = index; i < candidates.length; i++) {
            permute([...arr, candidates[i]], remain-candidates[i], i);
        }
    }
    permute()
    return res;
};

We wouldn't be able to memoize this because we trust the backtracking and also we are not revisiting any past combinations. Basically we wouldn't be able to optimize the solution any further. Many of the question involving backtracking are the same

Question 42: Combination Sum 2

Like the previous question we just add one more condition, that we make sure we only use each element once!

var combinationSum2 = function(candidates, target) {
    candidates.sort(function(a, b) {
        return a-b
    })
    var result = []
    
    function findResult(currentResult, candidates, target) {
        if (target === 0) result.push(currentResult)
        for (let i=0; i<candidates.length; i++) {
            if (i!==0 && candidates[i] === candidates[i-1]) continue
            if (target-candidates[i]<0) return
            findResult(currentResult.concat([candidates[i]]), candidates.slice(i+1), target-candidates[i])
        }
    }
    

    findResult([], candidates, target)
    return result
};

Question 43: Muliply Strings---------------------------------------------------------------------------------------------------------Question 43: Muliply Strings


var multiply = function(num1, num2) {
    if (num1 === '0' || num2 === '0') return '0'
    
    const m = num1.length, n = num2.length, res = new Array(m+n).fill(0)
    
    for (let i=m-1; i>=0; i--) {
        for (let j=n-1; j>=0; j--) {
            const p1=i+j, p2=i+j+1
            let sum = res[p2] + Number(num1[i]) * Number(num2[j])
            res[p2] = sum%10
            res[p1] += Math.floor(sum/10)
        }
    }
    if (res[0] === 0) res.shift()
    return res.join('')
    
}

Question 46: Permutations---------------------------------------------------------------------------------------------------------Question 46: Permutations

There are many questions similar to this where we use the backtracking method and because we are not revisiting values, we wouldn't have a reason to memoize it

var permute = function(nums) {
    let res = [];
    Permutations(nums,[]);
    return res;
    
    function Permutations(nums,ans){
      if(nums.length == 0){
            res.push(ans);
            return;
      }  
      for(let i = 0; i < nums.length; ++i){
         let k = nums[i];
         nums.splice(i,1);
         Permutations(nums, [...ans,k]);
         nums.splice(i,0,k);
      }
  }
};

Question 48: Rotate Image

I like to think that we are going down each colum and reversing it and then turning them into rows.

var rotate = function(matrix) {
  for(let i=0;i<matrix.length;i++){
      for(let j=i+1;j<matrix[i].length;j++){
          let temp = matrix[i][j]
          matrix[i][j] = matrix[j][i]
          matrix[j][i] = temp
      }
  }
  for(let i=0;i<matrix.length;i++){
      matrix[i].reverse()
  }  
};

Question 49: Group Anagrams-------------------------------------------------------------------------------------------------------Question 49: Group Anagrams

This question is very similar to finding the complement. We just make sure that all the letters are the same for all the elements in the array

var groupAnagrams = function(strs) {
    strs = strs.sort();
    var mapping = {};
    for (var i = 0; i < strs.length; i++) {
        var str = strs[i];
        var sorted = str.split('').sort().join('');
        
        if (mapping[sorted] === undefined) {
            mapping[sorted] = [str];
        } else {
            mapping[sorted].push(str);
        }
    }
    
    var output = [];
    for (var arr in mapping) {
        output.push(mapping[arr]);
    }
    
    return output;
};

Question 55: Jump Game

This is similar to the min stars we have done before, we want to minimize the numeber of steps we take and we know that we start off with the first step at index 0. I will just skip the the memoization algorithm

var canJump = function(nums) {
    const memo = new Map();
    
    function permute(idx) {
        if(memo.has(idx)) return memo.get(idx)
        if(idx >= nums.length-1) return true;
        if(nums[idx] === 0) return false;
        
        for(let i = nums[idx]; i >= 1; i--) {
            if(permute(idx + i)) {
                memo.set(idx, true);
                return true
            }
        }
        memo.set(idx, false);
        return false;
    }
    return permute(0);
};

Question 53: Maximum Subarray-------------------------------------------------------------------------------------------------------Question 53: Maximum Subarray
We can use kadanes algorithm which is prefixSum

const maxSubArray = function(nums) {
    let max_ending_here = 0;
    let max_so_far = -Number.MAX_VALUE;

  for (let i = 0; i < nums.length; i++) {
      max_ending_here = Math.max(max_ending_here + nums[i], nums[i]);
      max_so_far =  Math.max(max_ending_here, max_so_far);
  }
    
  return max_so_far;
};

Question 58: Length of Last Word-----------------------------------------------------------------------------------------------------------Question 58: Length of Last Word

We just split the strings and find the length of the last element of the array

var lengthOfLastWord = function(s) {
    let words = s.split(' ').filter(str => str);
    return words.length ? words[words.length-1].length : 0;
};

Question 66: Plus One-----------------------------------------------------------------------------------------------------------------------Question 66: Plus One

var plusOne = function(digits) {
    var pos = digits.length - 1;
    while(pos >=0 && digits[pos] === 9) {
        digits[pos] = 0;
        pos--;
    }
    if (pos < 0) {
       digits.unshift(1)
    } else {
        digits[pos] += 1;
    }
    
    return digits;
}

Question 75: sort colors

The brute force would to just to sort this in logn time

Optimal solution would be to have three pointers. One at the end and two at the beginning.
In this case think of the i j k pointer as 0 1 and 2 pointers
In fact this is similar to 3Sum. However this is order specific so we would check if the element is a 2, then we would swap it with the last element, and decrement the 2 pointer. If the value was zero we would increment the zero and 1 pointer and lastly if it was a 1 we would just increment the 1 pointer.

var sortColors = function(nums) {
    let [lo, cur, hi] = [0, 0, nums.length - 1]
    while (cur <= hi) {
        if (nums[cur] === 2) {
            nums[cur] = nums[hi]
            nums[hi--] = 2
        }
        if (nums[cur] === 0) {
            nums[cur++] = nums[lo]
            nums[lo++] = 0
        }
        if (nums[cur] === 1) {
            cur++
        }
    }
};


Question 78: Subsets

This question is like many backtracking question. We add an element, check if it's a valid array then add it to a list of valid arrays

var subsets = function(nums) {
    const subsets = [[]]
    nums.forEach((n)=>{
        subsets.forEach((s) => {
            subsets.push([...s, n])
        })
    })
    return subsets 
};


Question 86:
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode current = head;
    while (current != null && current.next != null) {
        if (current.next.val == current.val) {
            current.next = current.next.next;
        } else {
            current = current.next;
        }
    }
    return head;
        
    }
}


Question 88: Merge Sorted Array---------------------------------------------------------------------------------------------------Question 88: Merge Sorted Array


var merge = function(nums1, m, nums2, n) {
    let first = m-1;
    let second = n-1;
    
    for(let i = m+n-1; i>=0;i--){
        if(second <0){
            break;
        }
        if(nums1[first] > nums2[second]){
            nums1[i] =nums1[first];
            first--;
        }
        else{
            nums1[i] = nums2[second];
            second--;
        }
    }
    return nums1
};

Question 90: Subset !!

This is like many of the backtracking question we have done before

var subsetsWithDup = function(nums) {
    nums.sort()
    const powerset = [];
    
    function permute(arr, index) {
        powerset.push(arr)
        
        for(let i = index; i < nums.length; i++) {
            if(i !== index && nums[i] === nums[i-1]) continue;
            permute([...arr, nums[i]], i+1)
        }
    }
    permute([], 0);
    return powerset;
};

Question 95: Unique Binary Search Trees II-----------------------------------------------------------------------------Question 95: Unique Binary Search Trees II
Brute force:

var generateTrees = function(n) {
    if(n <= 0) {
        return [];
    }
    return solve(1, n);
};

function solve(start, end) {
    var treeList = [];
    if(start > end) {
        treeList.push(null);
        return treeList;
    }
    for(var i = start; i <= end; i++) {
        var leftList = solve(start, i - 1);
        var rightList = solve(i + 1, end);
        
        for(var j = 0; j < leftList.length; j++) {
            for(var k = 0; k < rightList.length; k++) {
                var curNode = new TreeNode(i);
                curNode.left = leftList[j];
                curNode.right = rightList[k];
                treeList.push(curNode);
            }
        }
    }
    return treeList;
}

Using the optimal: all we do similiar to the previous question is we memoize it.

var generateTrees = function(n) {
    if(n == 0) return [];
    let map = new Map();
    
    let helper = function(lo = 1, high = n){
        const result = []
        if(lo > high) {
            result.push(null);
            return result
        }
        const key = `${lo}#${high}`;
        if(map.has(key)) return map.get(key);
        for(let i=lo; i<=high; i++) {
            const leftNodes = helper(lo, i-1)
            const rightNodes = helper(i+1, high)

            for(let j=0; j<leftNodes.length; j++) {
                for(let k=0; k<rightNodes.length; k++) {
                    const root = new TreeNode(i);
                    root.left = leftNodes[j];
                    root.right = rightNodes[k];
                    result.push(root)
                }
            }
        }
        map.set(key, result);
        return result;
    }
    return helper();
};

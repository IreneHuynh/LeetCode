
Question 838: Push Dominoes-----------------------------------------------------------------------------------------------------------Question 838: Push Dominoes


We want all the non dot letters and we also want their indices we then make a list for them. However there is a slight bug in this because we are not yet accounting for the case where distances are odd 

var pushDominoes = function(dominoes) {
    let finalDominoes = dominoes.split("");
    
    for (let curr = 1; curr < dominoes.length; curr += 1) {
        if (dominoes[curr] == "." && dominoes[curr - 1] == "R") {
            let next = curr + 1;
            while(next == ".") {
                next += 1
            }
            next += 1;
            if (dominoes[next] == "L") {
                let distance = next - curr;
                for (let i = 1; i <= Math.floor(distance / 2); i += 1) {
                    finalDominoes[curr + i - 1] = "R";
                    finalDominoes[next - i] = "L";
                }
            }
        }
        else if (dominoes[curr] == "L" && dominoes[curr - 1] == ".") {
            finalDominoes[curr - 1] = "L";
        }
    }
    
    return finalDominoes.join("");
};

Question 867: Transpose Matrix

Brute force:

We would copy the matrix's elements over to a new matrix

var transpose = function(A) {
    let result = [];
    
    for(let i= 0; i<A[0].length; i++){
        let currentCol = []
        for(let j=0; j<A.length; j++){
            currentCol.push(A[j][i])
        }
        result.push(currentCol);
    }
    return result
};

Question 888: Fair Candy Swap---------------------------------------------------------------------------------------------------------------Question 888: Fair Candy Swap

Optimal Solution:

We just want to find the differnce of the candies, then iterate through the first array adding the difference to each element and seeing if that element would exist in the second array.

var fairCandySwap = function(A, B) {

    let div = (eval(B.join("+")) - eval(A.join("+")))/2;
    
    for( i = 0; i < A.length; i++ ){
            if(B.indexOf(A[i]+div) >= 0)
                return [A[i], A[i]+div];
    }
};

Question 896: Monotonic Array---------------------------------------------------------------------------------------------------------------Question 896: Monotonic Array

Monotonic arrays are either increasing or decreasing.

Optimal
We would just check the outer boundaries and see if it is either increasing or decreasing. This is just a two pointer approach. We would then iterate inwards

var isMonotonic = function(A) {
    let a = 0;
	let b = 1;
	let change;
	while (b <= A.length - 1) {
		if (change === undefined && A[a] !== A[b]) {
			change = A[a] < A[b] ? 'increasing' : 'decreasing'
		}
		if (change === 'increasing') {
			if (A[a] > A[b]) return false;
		}
		if (change === 'decreasing') {
			if (A[a] < A[b]) return false;
		}
		a++;
		b++;
	}
	return true;
};


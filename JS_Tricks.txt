
This is where I will post JS library or algorithms I found useful.


1-Having 3+ months time
1- The very first thing is to be consistent in the weekly coding contest and after the contest do upsolving (reading the solutions and discussing).
2- For those who have hard time with medium problems during contest should do atleast 50 easy problems(sorted by difficulty)
3- If you find difficulty in any topic , then you have an option to sort problems according that topic and start solving.
4- With this you also have time to prepare for other subjects (DBMS, OOPS , OS are 3 most important).

2-Having about a month time
1- You should be focusing on covering most important questions (which will teach you many concepts and approaches)
2- Do questions topic wise and coompany wise.
3- I am providing the compiled list of all important problems from each topic and companies with their detailed soltuions (https://docs.google.com/document/d/1IES8uw9f4w9iCsIoArUioYB8ctVRR-TaA1Qu4YhcQ9U/edit?usp=sharing)

To prepare for OS (https://docs.google.com/document/d/191a-PHHLAH1I33-G3X_adOksNK0OKFiNPDMrnHhZdco/edit?usp=sharing) and https://tushars.xyz/data/os.html
To prepare for DBMS(https://drive.google.com/file/d/1DQ_eiQZuuF8hKbcGkhREjwdTh1MCrl-g/view?usp=sharing) and https://tushars.xyz/data/db.html
Computer Networks https://tushars.xyz/data/cn.html
System Design (https://github.com/prasadgujar/low-level-design-primer)
OOP https://www.javatpoint.com/java-tutorial


Tips 
________

1.) Reducers are accumulators, becareful because we won't be able to backtrack with this.

const array1 = [1, 2, 3, 4];
const reducer = (accumulator, currentValue) => accumulator + currentValue;

// 1 + 2 + 3 + 4
console.log(array1.reduce(reducer));
// expected output: 10

// 5 + 1 + 2 + 3 + 4
console.log(array1.reduce(reducer, 5));
// expected output: 15

2.) This is just a simple algorith that comes up a lot. It's the backtracking algorithn and is used in a lot of the solutions. This is a skeleton taken from combination sum. We always pass an empty list of list and ask if the conditions are ment to add a list of elements before adding them to the list of list. Sometimes the conditions varies such as no duplicate elements.

var combinationSum = function(candidates, target) {
    const res = [];
    candidates.sort();
    function permute(arr=[], remain = target, index=0) {
        if(remain < 0) return;
        else if(remain === 0) res.push(arr);
        for(let i = index; i < candidates.length; i++) {
            permute([...arr, candidates[i]], remain-candidates[i], i);
        }
    }
    permute()
    return res;
};

Question 202: Happy Number 

Our main idea for solution here is to keep on having sum of square of digits and store it in a set or object.
After calculating sum of digits of a num each time, check if it is already in our storage or if it equals 1.
If it equals 1 then return true. if it is already in storage then return false as a endless loop has formed and it is repeating now.
If both condition doesnt match then keep on continuing.

var isHappy = function(n) {
    let set = new Set();
    while(!set.has(n)) {
        set.add(n);
        let arr = n.toString();
        let squarsSum = 0;
        for (let i = 0; i < arr.length; i++){
            squarsSum += Math.pow(+arr[i],2)
        }
        if (squarsSum === 1) return true;
        n = squarsSum;
    }
    return false;
};

Question 204: 

There is a method called the Sieve of Eratothenes.

var countPrimes = function (n) {
    let primes = [];
    for (let i = 0; i < n; i++) primes[i] = true;
    primes[0] = false, primes[1] = false;
    for (let i = 2; i < Math.sqrt(n); i++) {
        if (primes[i] == true) {
            for (let j = i**2; j < n; j += i) { 
                // optimisation: we start at i**2 instead of i*2
                primes[j] = false;
            }
        }
    }
    return primes.map((bool, idx) => bool ? idx : 0)
            .filter(val => val > 0).length;
    // Time Complexity: O(nlog(n))
    // Space Complexity: O(n)
};

Question 205: Isomorphic Strings

Brute force we would just want to map the character, this is hashset question. 

var isIsomorphic = function(s, t) {
    if (s.length !== t.length) return false;
    if (new Set(s).size !== new Set(t).size) return false;
    let map = new Map();
    for (let i = 0; i < t.length; i++) {
        if (map.has(s[i]) && map.get(s[i]) !== t[i]) {
            return false;
        }
        map.set(s[i], t[i])
    }
    return true;
};

Question 217: Contain Duplicates

The brute force solution is just to have two pointers and iterate through the array. However this is O(N^2) in time complexity.

The optimal solution is to use a set, where we try to insert an element into the hash to check if the same number exist in the set already.
This is 0(n) time complexity because we have to iterate through the list in worst case senario and in each iteration the adding and searchin step is
constant time.

var containsDuplicate = function(nums) {
    const obj = {}
    
    for (let num of nums){
        if (obj[num]) return true
        else obj[num] = true
    }
    
    return false   
};

Question 228: Summary Ranges

Again this is two pointer. We just want to compare the prev with the next to make sure there is a difference of 1. After finding the range we just push

var summaryRanges = function(nums) {
    const ranges = [];
    let i = 0;
    // Iterate through `nums` and use `j` to identify incontinuity.
    // When incontinuity occurs, compose the current range and set `i`
    // for the new starting point.
    for (let j = 1; j <= nums.length; j++) {
        if (nums[j] !== nums[j - 1] + 1) {
            if (i === j - 1) {
                ranges.push(`${nums[i]}`);
            } else {
                ranges.push(`${nums[i]}->${nums[j - 1]}`);    
            }          
            i = j;
        }
    }
    return ranges;
};

Question 229: Majority Number II

In this case we are looking for linear time and space complexity of constant. Then we have to refer to Boyer Moore
var majorityElement = function(nums) {
    const n = nums.length
    if (n < 1) return []
    if (n < 2) return nums
    
    let count1 = 0, count2 = 0, candidate1 = 0, candidate2 = 1
    
    for (let i = 0; i < n; i++) {
        if (nums[i] == candidate1) count1++
        else if (nums[i] == candidate2) count2++
        else if (count1 == 0) {
            candidate1 = nums[i]
            count1 = 1
        } 
        else if (count2 == 0) {
            candidate2 = nums[i]
            count2 = 1
        } else {
            count1--
            count2--
        }
    }
    
    let x = []
    if (nums.count(candidate1) > n / 3) x.push(candidate1)
    if (nums.count(candidate2) > n / 3) x.push(candidate2)
        
    return x
};
Array.prototype.count = function(num) {
    let count = 0
    for (let i = 0; i < this.length; i++)
        if (this[i] == num) count++
    
    return count
}

Question 238: Product of Array Exception

This is just prefix sum, however we are computing the left side and right side therefore creating two prefix sums then we multiply the i-1 on the L side by i+1 on the right side to get the sum for i.

const productExceptSelf = (nums) => {
    const forward = new Array(nums.length).fill(1);
    const backward = new Array(nums.length).fill(1);
    const product = new Array(nums.length).fill(0);

    forward[0] = nums[0];
    for(let i = 1; i < nums.length ; i++){
        forward[i] = forward[i - 1] * nums[i];
    }
    backward[nums.length - 1] = nums[nums.length - 1];
    for(let i = nums.length - 2; i >= 0 ; i--){
        backward[i] = backward[i + 1] * nums[i];
    }
    
    for(let i = 0; i< nums.length; i++){
        if(i === 0) {
            product[i] = backward[i + 1];
        } else if( i === nums.length -1) {
            product[i] = forward[i - 1];
            
        } else {
            product[i] = forward[i - 1]*backward[i + 1];            
        }
    }
    return product;
}

If we want to make it linear space, we just use the left prefix sum and have a right side as a variable, where we gather all the multiples of from the right side

Question 242: Valid Anagram

The brute force would just be sorting out the strings s and t and then comparing the elements. This would take nlogn n time for the sort and n for the comparisons. We know that nlogn will dominate

The optimal solution is use a hashset, where each letter is its own key and the value is the number of occurances.

var isAnagram = function(s, t) {
    if(s.length!==t.length) return false;
    let map = {};
    for(let char of s){
        map[char] = ++map[char] || 1
    }
    for(let char of t){
        if(!map[char]) return false;
        map[char]--
    }
    return true;
};


Question 278: First Bad Version------------------------------------------------------------------------------------------------------Question 278: First Bad Version

Optimal Solution:
Here I am using the bisect right algorith for searching! Since we are return the element to the right of the bad version.

var solution = function(isBadVersion) {
    /**
     * @param {integer} n Total versions
     * @return {integer} The first bad version
     */
    return function(n){
    
    let lo = 1;
    let hi = n;
    let mid = null

    while (lo <= hi){
        let mid = Math.floor((lo + hi)/2);
        if(isBadVersion(mid) ){
            bad = mid
            hi = mid - 1;
        } else {
            lo = mid + 1;
        }
        
    }
        return bad;
  }
}

Question 290: Word Pattern

The brute force would be to create a 2 hashmaps, such that each pattern gets mapped to a word, while the second map has words mapped to charactesr in the pattern. This prevents characters having duplicate mappings.

The optimal solution would be to in a way combine the 2 hashmaps, such that each word has an index and each char has an index
var wordPattern = function(pattern, str) {
    const words = str.split(/\s+/);
    const map = new Map();
    
    if(words.length !== pattern.length) return false;
    if(new Set(words).size !== new Set(pattern).size) return false;
    
    for(let i = 0; i < pattern.length; i++) {
        if(map.has(pattern[i]) && 
           map.get(pattern[i]) !== words[i]) return false;
        map.set(pattern[i], words[i]);
    }
    return true;
};
var wordPattern = function(pattern, str) {
    const words = str.split(/\s+/);
    const map = new Map();
    
    if(words.length !== pattern.length) return false;
    if(new Set(words).size !== new Set(pattern).size) return false;
    
    for(let i = 0; i < pattern.length; i++) {
        if(map.has(pattern[i]) && 
           map.get(pattern[i]) !== words[i]) return false;
        map.set(pattern[i], words[i]);
    }
    return true;
};

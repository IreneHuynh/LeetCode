Question 303: Rane Sum Query---------------------------------------------------------------------------------------------------------Question 303: Rane Sum Query

var NumArray = function(nums) {
    let sum=new Array(nums.length+1).fill(0);
    for(let i=1;i<=nums.length;i++){
        sum[i]=sum[i-1]+nums[i-1];
    }
    this.sum=sum;
};
NumArray.prototype.sumRange = function(i, j) {
    const {sum}=this;
    return sum[j+1]-sum[i];
};

Question 343: Integer Break-----------------------------------------------------------------------------------------------------------Question 343: Integer Break

Optimal solution:
We want to take the Max of either the number itself multiplied by one or we split it to its divisors

var integerBreak = function(n) {
    var dp = new Array(n+1).fill(0);
    dp[0] = 0;
    dp[1] = 1;
    for(var i = 2; i <= n; i++){
        for(var j = 1; 2*j <= i; j++){
            dp[i] = Math.max( dp[i], Math.max(j, dp[j])*Math.max(i-j, dp[i-j]) );
        }
    }

    return dp[n];
};

Question 394: Decode String-----------------------------------------------------------------------------------------------------------Question 394: Decode String

This can either be recursive or stack,

var decodeString = function(s) {
    var code;
    var startIndex;
    var result = [""];
    var count = [];
    
    for (var i = 0; i < s.length; i++) {
        if (s[i] === "[") {
            result.push("");
        } else if (s[i] === "]") {
            result[result.length - 2] += result.pop().repeat(count.pop());
        } else if (s[i].charCodeAt() < 58) {
            startIndex = i;
            while (s[i + 1].charCodeAt() < 58) {
                i++;
            }

            count.push(+s.substring(startIndex, i + 1));
        } else {
            startIndex = i;
            while ((code = s.charCodeAt(i + 1)) > 96 && code < 123) {
                i++;
            }
            result[result.length - 1] += s.substring(startIndex, i + 1);
        }
    }
    
    return result.pop();
};

var decodeString = function(s) {
    return helper(s, "")
    
    function helper(s, str){
        let num = 0;
        for(let i = 0; i < s.length; i++){
            let x = s.substr(i, 1);
            
            if(x == '['){
                let result, n;
                [result, n] = helper(s.substr(i+1), "");
                while(num > 0){
                    str += result;
                    num--;
                }
                i += n;
            }
            else if(x == ']') return [str, ++i]
            
            else if(!isNaN(x)) num = num*10 + parseInt(x);
            else str += x;
        }
        return str
    }
};
